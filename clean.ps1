# Script d·ªçn d·∫πp v√† gi·∫£i ph√≥ng dung l∆∞·ª£ng cho d·ª± √°n Hitomi Downloader
# S·ª≠ d·ª•ng: .\clean.ps1

Write-Host "üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp d·ª± √°n..." -ForegroundColor Cyan

# H√†m t√≠nh k√≠ch th∆∞·ªõc th∆∞ m·ª•c
function Get-FolderSize {
    param([string]$Path)
    if (Test-Path $Path) {
        $size = (Get-ChildItem $Path -Recurse -ErrorAction SilentlyContinue | 
                 Measure-Object -Property Length -Sum -ErrorAction SilentlyContinue).Sum
        return [math]::Round($size / 1MB, 2)
    }
    return 0
}

$totalFreed = 0

# 1. X√≥a th∆∞ m·ª•c target (Rust build artifacts)
$targetPath = ".\src-tauri\target"
if (Test-Path $targetPath) {
    $size = Get-FolderSize $targetPath
    Write-Host "üóëÔ∏è  ƒêang x√≥a src-tauri/target ($size MB)..." -ForegroundColor Yellow
    Remove-Item $targetPath -Recurse -Force -ErrorAction SilentlyContinue
    $totalFreed += $size
    Write-Host "‚úÖ ƒê√£ x√≥a src-tauri/target" -ForegroundColor Green
} else {
    Write-Host "‚è≠Ô∏è  src-tauri/target kh√¥ng t·ªìn t·∫°i" -ForegroundColor Gray
}

# 2. X√≥a th∆∞ m·ª•c node_modules
$nodeModulesPath = ".\node_modules"
if (Test-Path $nodeModulesPath) {
    $size = Get-FolderSize $nodeModulesPath
    Write-Host "üóëÔ∏è  ƒêang x√≥a node_modules ($size MB)..." -ForegroundColor Yellow
    Remove-Item $nodeModulesPath -Recurse -Force -ErrorAction SilentlyContinue
    $totalFreed += $size
    Write-Host "‚úÖ ƒê√£ x√≥a node_modules" -ForegroundColor Green
} else {
    Write-Host "‚è≠Ô∏è  node_modules kh√¥ng t·ªìn t·∫°i" -ForegroundColor Gray
}

# 3. X√≥a th∆∞ m·ª•c dist
$distPath = ".\dist"
if (Test-Path $distPath) {
    $size = Get-FolderSize $distPath
    Write-Host "üóëÔ∏è  ƒêang x√≥a dist ($size MB)..." -ForegroundColor Yellow
    Remove-Item $distPath -Recurse -Force -ErrorAction SilentlyContinue
    $totalFreed += $size
    Write-Host "‚úÖ ƒê√£ x√≥a dist" -ForegroundColor Green
} else {
    Write-Host "‚è≠Ô∏è  dist kh√¥ng t·ªìn t·∫°i" -ForegroundColor Gray
}

# 4. X√≥a c√°c file cache v√† temp
$cacheFiles = @(
    ".cache",
    ".temp",
    ".tmp",
    "*.tsbuildinfo"
)

foreach ($pattern in $cacheFiles) {
    $files = Get-ChildItem -Path . -Filter $pattern -Recurse -ErrorAction SilentlyContinue
    if ($files) {
        foreach ($file in $files) {
            Write-Host "üóëÔ∏è  ƒêang x√≥a $($file.Name)..." -ForegroundColor Yellow
            Remove-Item $file.FullName -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

Write-Host ""
Write-Host "‚ú® Ho√†n t·∫•t! ƒê√£ gi·∫£i ph√≥ng kho·∫£ng $totalFreed MB" -ForegroundColor Green
Write-Host ""
Write-Host "üìù ƒê·ªÉ kh√¥i ph·ª•c d·ª± √°n:" -ForegroundColor Cyan
Write-Host "   - C√†i l·∫°i dependencies: pnpm install" -ForegroundColor White
Write-Host "   - Build l·∫°i project: pnpm tauri build ho·∫∑c pnpm tauri dev" -ForegroundColor White
